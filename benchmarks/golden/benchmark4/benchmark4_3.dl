.type IntAttr
.type StrAttr
.type Rel
.decl country?province?city?population(__id: Rel, measured: StrAttr, nestedContent: IntAttr, year: IntAttr)
.input country?province?city?population
.decl country?province?city(__id: Rel, country: StrAttr, elevation: StrAttr, id: StrAttr, latitude: StrAttr, longitude: StrAttr, name: StrAttr, population: Rel)
.input country?province?city
.decl country?province(__id: Rel, area: StrAttr, capital: StrAttr, city: Rel, country: StrAttr, id: StrAttr, name: StrAttr, population: Rel)
.input country?province
.decl country(area: StrAttr, border: Rel, capital: StrAttr, car_code: StrAttr, ethnicgroup: Rel, gdp_agri: StrAttr, gdp_ind: StrAttr, gdp_serv: StrAttr, gdp_total: IntAttr, government: StrAttr, indep_date: Rel, infant_mortality: StrAttr, inflation: StrAttr, language: Rel, memberships: StrAttr, name: StrAttr, population: Rel, population_growth: StrAttr, province: Rel, religion: Rel, unemployment: StrAttr)
.input country
.decl City_Population(city_code: StrAttr, year: IntAttr, population: IntAttr)
.output City_Population(delimiter="\t")

City_Population(v_City_Population?city_code, v_City_Population?year, v_City_Population?population) :-
    country(_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, v_7, _, _),
    country?province(v_7, _, _, v_6, _, _, _, _),
    country?province?city(v_6, _, _, v_City_Population?city_code, _, _, _, v_5),
    country?province?city?population(v_5, _, v_City_Population?population, v_City_Population?year).

